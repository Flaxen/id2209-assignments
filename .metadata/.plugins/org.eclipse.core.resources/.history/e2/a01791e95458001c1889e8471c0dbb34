/**
* Name: project_ver1
* Based on the internal empty template. 
* Author: Flaxen
* Tags: 
*/


model project_ver1

global {
	// global variable to track
	int universalHappiness <- 0;
	
	// editable variables to change simulation
	int numberOfBars <- 4;
	int numberOfCampsites <- 2;
	int numberOfGuests <- 50;
	float campsiteBonus <- 0.15; // the bonus utility gained from being at a campsite
	float hatedUtilModificationValue <- -0.1; // affects utility if a guest belonging to a "hated" team is found
	
	// other variables used during simulations
	int distanceThreshold <- 2;
	int numberOfPlaces <- numberOfBars + numberOfCampsites;
	int numberOfTeams <- 5;
	list<string> teams <- ["AIK", "DIF", "HIF", "MFF", "IFKG"];
	list ruleList <- list_with(numberOfTeams, list_with(numberOfTeams, 0.0));
	int numberOfAttributes <- 6;
	
	// used for pausing the simulation during certain events. set the pause_flag to true when you wish to automatically pause the simulation
	// used for debugging and demonstration purposes
	bool pause_flag <- false;
	reflex pause_sim when: pause_flag {
		pause_flag <- false;
		do pause;
	}
			
	
	init {
		create Place number:numberOfPlaces;
		create Guest number:numberOfGuests;	
		
		// assign bars to places
		loop counter from: 0 to: numberOfBars - 1 {
			Place[counter].type <- "bar";
			Place[counter].defaultColor <- #brown;
			Place[counter].agentColor <- #brown;
		}
		
		// assign campsites to places
		loop counter from: numberOfBars to: numberOfPlaces - 1 {
			Place[counter].type <- "campsite";
			Place[counter].defaultColor <- #purple;
			Place[counter].agentColor <- #purple;
			
		}
		
		// set up relation list
		// relations are negative diagonally shifted by 1 to the right
		ruleList[0][length(ruleList)-1] <- hatedUtilModificationValue; 
		int j <- 0;
		loop i from:1 to:length(ruleList)-1 {	
			ruleList[i][j] <- -0.1;
			j <- j+1;	
		}
	}
	
}

species Guest skills: [moving, fipa] {
	
	// get random team from team list
	string team <- teams[rnd(length(teams)-1)];
	
	// 3 personal traits
	float knowledge <- rnd(1.0);
	float personality <- rnd(1.0);
	float alcoholTolerence <- rnd(1.0);

	// 3 personal preferences on traits
	float knowledgePref <- rnd(1.0);
	float personalityPref <- rnd(1.0);
	float alcoholTolerencePref <- rnd(1.0); 
	
	// movement variables
	point targetPoint <- nil;
	Place targetPlace <- nil;
	
	// variables for guest interaction
	Guest toTalkTo <- nil;
	list<Guest> alreadySpokenTo;
	float util <- 0.0;
	list<Guest> HIF_friends;
	
	float startedFight <- 0.0; // timestamp of when a fight started
	
	// flags
	bool inPlace <- false;
	bool notAskedForUtilYet <- true;
	bool targetIsSpecial <- false;
	bool busy <- false;
	bool doingMegabad <- false;
	bool omw <- false;
	
	rgb agentColor <- #green;
	
	aspect base {
		
		// resets guest color coding when constraints are reached
		if(agentColor = #orange and location = targetPlace.location) {
			agentColor <- #green;
			omw <- false;
			
		} else if(agentColor = #blue and targetPoint != nil) {
			agentColor <- #green;
		} else if(agentColor = #cyan and !inPlace) {
			agentColor <- #green;
		}
		
		
		draw circle(1) color: agentColor;
	}
	
	reflex idle when: targetPoint = nil {
		agentColor <- #green;
		do wander;
	}
	
	reflex targetPlace when: targetPoint = nil and flip(0.3) and time mod 20 = 0 and !inPlace and !omw {
		
		targetPlace <- Place[rnd(length(Place)-1)];

		targetPoint <- targetPlace.location;	
	}
	
	reflex gotoTarget when: targetPoint != nil {
		do goto target:targetPoint;
	}
	
	reflex enterPlace when: Place at_distance distanceThreshold contains targetPlace and !inPlace {
		ask targetPlace {
			do addToGuestList(myself);
		}
		inPlace <- true;
	}
	
	reflex getGuestToTalkTo when: toTalkTo = nil and inPlace and flip(0.05) {
		Guest temp;
		ask targetPlace {
			temp <- self.guestList[rnd(length(guestList)-1)];
			if temp != myself and temp.toTalkTo = nil and !(myself.alreadySpokenTo contains temp) {
				add temp to: myself.alreadySpokenTo;
				add myself to: temp.alreadySpokenTo;
				myself.toTalkTo <- temp;
				temp.toTalkTo <- myself;
			}
		}
	}
	
	reflex talkToGuest when: toTalkTo != nil and notAskedForUtilYet {
		notAskedForUtilYet <- false;
		
		ask toTalkTo {
			util <- self.knowledge*myself.knowledgePref + self.personality*myself.personalityPref + self.alcoholTolerence*myself.alcoholTolerencePref + 
				ruleList[nameToInt(myself.team)][nameToInt(self.team)];
				
			if(targetPlace.type = "campsite") {
				util <- util + campsiteBonus;
			}
			//write myself.name + ": " + util;
			
			if(ruleList[nameToInt(myself.team)][nameToInt(self.team)] != 0) {
				myself.targetIsSpecial <- true;
				//write myself.name + ": " + "ew found someone of wrong team";
			}
			
		}
		do actOnUtil;
	}
	
	action actOnUtil {
		switch util {
			match_between[0.0, 0.3] {
				if(targetIsSpecial) {
					do megaBad;
				} else {
					do bad;
				}
			}
			match_between[0.3, 3.5] {
				do good;			
			}
		}
	}
	action good {
		// stanna kvar i tid
		if(team = "HIF" and !(HIF_friends contains toTalkTo)) {
			add toTalkTo to: HIF_friends;
		}
		universalHappiness <- universalHappiness + 1;
	}
	
	action bad {
		// testa någon annan
		if(!toTalkTo.busy) {
			write "" + self + " bad, leaving " + toTalkTo;
			do stopConversation;
			universalHappiness <- universalHappiness - 1;
		}

		
	}
	
	action megaBad {
		write "mega bad. pausing " + team;
		
		switch team {
			match("AIK") {
				// slåss(påverkar alla i Placeen -)
				write "" + self + ": FIGHT with " + toTalkTo;
				do fight;
			}
			match("DIF") {
				// gå till annan Place direkt
				if(!busy) {
					write "" + self + ": EW leaving Place from " + toTalkTo;
					universalHappiness <- universalHappiness - 1;
					do stopConversation;
					do leavePlace;
					agentColor <- #blue;
				}

			}
			match("HIF") {
				// ring kompisar
				//pause_flag <- true;
				
				write "calling friends";
				if(!empty(HIF_friends)) {
					do start_conversation (to: HIF_friends, protocol: "fipa-request", performative: "request", contents: ["Need help at: ", targetPlace]);
					// öka uni happy med len(hiffriends?) alla kom dit och blev glada. ta - alla andra i Placeen? dom känner sig hotade?
				} else {
					// big sad no friends
					universalHappiness <- universalHappiness - 1;
				}
				
			}
			match("MFF") {
				
				// går ut och slåss(Placea deras glädje -)
				write "" + self + ": lets take this outside with " + toTalkTo;
				startedFight <- time;
		
				busy <- true;
				ask toTalkTo {
					busy <- true;
				}
				
				
				agentColor <- #cyan;
				targetPoint <- location + 3;
				ask toTalkTo {
					agentColor <- #cyan;
					targetPoint <- location + 2;
				}
				universalHappiness <- universalHappiness - 2;
				
			}
			match("IFKG") {
				// göra narr av alla i det laget (för alla i Placeen, andra lag happy+, narr laget happy-)
				write "HAH you team is bad";
				ask targetPlace {
					loop g over: guestList {
						if(g.team = myself.toTalkTo.team) {
							universalHappiness <- universalHappiness - 1;
						}
					}
				}
			}
		}
	}
	

	action fight {
		//write "" + self + "started fight";
		startedFight <- time;
		
		busy <- true;
		ask toTalkTo {
			busy <- true;
		}
		
		
		ask targetPlace {
			hasFight <- true;
		}
	}
	
	reflex endFight when: startedFight != 0.0 and time = startedFight+100 and busy {
		startedFight <- 0.0;
		busy <- false;
		
		
		ask toTalkTo {
			busy <- false;
			do leavePlace;
		}
		
		if(team = "AIK") {
			ask targetPlace {
				hasFight <- false;
			}
		}

		
		do stopConversation;
		do leavePlace;
	}
	
	reflex fleeFight when: targetPlace != nil and targetPlace.hasFight and !busy {
		universalHappiness <- universalHappiness - 1;
		//write "Place asking " + self + " to leave Place";
		do leavePlace;
	}
	
	reflex leavePlace when: inPlace and time mod rnd(100,200) = 0 and !busy {
		//write "" + self + " relfex leaving Place";
		do leavePlace;
	}
	
	action leavePlace {
		//write "" + self + " leaving Place";
		ask targetPlace {
			remove myself from: guestList;
		}
		alreadySpokenTo <- [];
		targetPlace <- nil;
		targetPoint <- nil;
		do stopConversation;
		inPlace <- false;
		

	}
	
	action stopConversation {
		if(toTalkTo != nil){
			ask toTalkTo{
				self.toTalkTo <- nil;	
				self.notAskedForUtilYet <- true;
			}
		}

		toTalkTo <- nil;
		notAskedForUtilYet <- true;
	}
	
	reflex accept_call when: !empty(requests) and !busy {
		message toRespond <- requests[0];
		list content <- toRespond.contents;
		Place b <- content[1];
		
		do agree(message: toRespond, contents: ["ok omw"]);
		
		if(inPlace) {
			do leavePlace;
		}
		targetPlace <- b;
		targetPoint <- targetPlace.location;
		agentColor <- #orange;
		omw <- true;
		
		
		
	}
	
	int nameToInt(string nameIn) {
		
		loop counter from: 0 to: length(teams)-1 {
			if(teams[counter] = nameIn) {
				return counter;
			}
			
		}
		
		write name + ": " +"name not found";
		return -1;
	}
}

species Place {
	
	rgb defaultColor;
	string type;
	bool hasFight <- false;
	
	list<Guest> guestList <- [];
	
	rgb agentColor;

	aspect base {
			
		if(hasFight) {
			agentColor <- #red;
		} else {
			agentColor <- defaultColor;
		} 
		
		if(type = "bar") {
			draw square(2) color: agentColor;
		} else if(type = "campsite"){
			draw triangle(3) color: agentColor;
			
		}
	}
	
	action addToGuestList(Guest toAdd) {
		add toAdd to: guestList;
	}
	
}



experiment my_experiment type:gui {
	output {
		display myDisplay {
			species Guest aspect:base;
			species Place aspect:base;
			
		}
		
		display infoDisplay {
			chart "universal happy" type: series x_range:[time-100, time+100] y_range:[universalHappiness-100, universalHappiness+100] {
				data "data" value: universalHappiness color: #black;
			}
		}
	}
}
